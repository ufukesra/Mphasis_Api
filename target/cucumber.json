[
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2021-05-06T00:28:21.965Z",
        "before": [
          {
            "result": {
              "duration": 947131633,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 4,
        "name": "I should be able to receive all comments list from comments endpoint",
        "description": "",
        "id": "comments-api-service-tests;i-should-be-able-to-receive-all-comments-list-from-comments-endpoint",
        "after": [
          {
            "result": {
              "duration": 242997,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1089203736,
              "status": "passed"
            },
            "line": 5,
            "name": "send a get request to \"/comments\" endpoint to get comments",
            "match": {
              "arguments": [
                {
                  "val": "\"/comments\"",
                  "offset": 22
                }
              ],
              "location": "CommentsStepDef.send_a_get_request_to_endpoint_to_get_comments(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 631517712,
              "status": "passed"
            },
            "line": 6,
            "name": "verify comment list with response headers and status code 200 and size 500",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 58
                },
                {
                  "val": "500",
                  "offset": 71
                }
              ],
              "location": "CommentsStepDef.verify_comment_list_with_response_headers_and_status_code_and_size(Integer,Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@comments"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:24.702Z",
        "before": [
          {
            "result": {
              "duration": 317828,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 8,
        "name": "I shouldn\u0027t be able to receive comment list from invalid endpoint",
        "description": "",
        "id": "comments-api-service-tests;i-shouldn-t-be-able-to-receive-comment-list-from-invalid-endpoint",
        "after": [
          {
            "result": {
              "duration": 306029,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 143311111,
              "status": "passed"
            },
            "line": 9,
            "name": "send a get request to \"/coment\" endpoint",
            "match": {
              "arguments": [
                {
                  "val": "\"/coment\"",
                  "offset": 22
                }
              ],
              "location": "UserStepDef.send_a_get_request_to_endpoint(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2148145,
              "status": "passed"
            },
            "line": 10,
            "name": "verify response with status code 404",
            "match": {
              "arguments": [
                {
                  "val": "404",
                  "offset": 33
                }
              ],
              "location": "UserStepDef.verify_response_with_status_code(Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@comments"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:24.854Z",
        "before": [
          {
            "result": {
              "duration": 606580,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 12,
        "name": "I should be able to create a new comment",
        "description": "",
        "id": "comments-api-service-tests;i-should-be-able-to-create-a-new-comment",
        "after": [
          {
            "result": {
              "duration": 547883,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 686622145,
              "status": "passed"
            },
            "line": 13,
            "name": "create a new comment payload and send a post request to \"/comments\" endpoint",
            "match": {
              "arguments": [
                {
                  "val": "\"/comments\"",
                  "offset": 56
                }
              ],
              "location": "CommentsStepDef.create_a_new_comment_payload_and_send_a_post_request_to_endpoint(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29274091,
              "status": "passed"
            },
            "line": 14,
            "name": "verify create new comment response with status code 201 and body",
            "match": {
              "arguments": [
                {
                  "val": "201",
                  "offset": 52
                }
              ],
              "location": "CommentsStepDef.verify_create_new_comment_response_with_status_code_and_body(Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@comments"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:25.576Z",
        "before": [
          {
            "result": {
              "duration": 168957,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 16,
        "name": "Schema validation for first comment",
        "description": "",
        "id": "comments-api-service-tests;schema-validation-for-first-comment",
        "after": [
          {
            "result": {
              "duration": 217371,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 120583363,
              "status": "passed"
            },
            "line": 17,
            "name": "send a get request to \"/comments/1\" endpoint to get comments",
            "match": {
              "arguments": [
                {
                  "val": "\"/comments/1\"",
                  "offset": 22
                }
              ],
              "location": "CommentsStepDef.send_a_get_request_to_endpoint_to_get_comments(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 251413886,
              "status": "passed"
            },
            "line": 18,
            "name": "validate the comment body with schema validation",
            "match": {
              "location": "CommentsStepDef.validate_the_comment_body_with_schema_validation()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@comments"
          }
        ]
      }
    ],
    "name": "Comments API Service Tests",
    "description": "",
    "id": "comments-api-service-tests",
    "keyword": "Feature",
    "uri": "file:src/test/resources/features/comment.feature",
    "tags": [
      {
        "name": "@comments",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "start_timestamp": "2021-05-06T00:28:25.951Z",
        "before": [
          {
            "result": {
              "duration": 1648357,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 4,
        "name": "I should be able to receive all post list from posts endpoint",
        "description": "",
        "id": "post-api-service-tests;i-should-be-able-to-receive-all-post-list-from-posts-endpoint",
        "after": [
          {
            "result": {
              "duration": 159851,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 111958520,
              "status": "passed"
            },
            "line": 5,
            "name": "send a get request to \"/posts\" endpoint to get posts",
            "match": {
              "arguments": [
                {
                  "val": "\"/posts\"",
                  "offset": 22
                }
              ],
              "location": "PostStepDef.send_a_get_request_to_endpoint_to_get_posts(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 32930334,
              "status": "passed"
            },
            "line": 6,
            "name": "verify post list with response headers and status code 200 and size 100",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 55
                },
                {
                  "val": "100",
                  "offset": 68
                }
              ],
              "location": "PostStepDef.verify_post_list_with_response_headers_and_status_code_and_size(Integer,Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@posts"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:26.103Z",
        "before": [
          {
            "result": {
              "duration": 517710,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 8,
        "name": "I shouldn\u0027t be able to receive post list from invalid endpoint",
        "description": "",
        "id": "post-api-service-tests;i-shouldn-t-be-able-to-receive-post-list-from-invalid-endpoint",
        "after": [
          {
            "result": {
              "duration": 153625,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 108775744,
              "status": "passed"
            },
            "line": 9,
            "name": "send a get request to \"/pooosst\" endpoint",
            "match": {
              "arguments": [
                {
                  "val": "\"/pooosst\"",
                  "offset": 22
                }
              ],
              "location": "UserStepDef.send_a_get_request_to_endpoint(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 255420,
              "status": "passed"
            },
            "line": 10,
            "name": "verify response with status code 404",
            "match": {
              "arguments": [
                {
                  "val": "404",
                  "offset": 33
                }
              ],
              "location": "UserStepDef.verify_response_with_status_code(Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@posts"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:26.215Z",
        "before": [
          {
            "result": {
              "duration": 205080,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 12,
        "name": "I should be able to create a new post",
        "description": "",
        "id": "post-api-service-tests;i-should-be-able-to-create-a-new-post",
        "after": [
          {
            "result": {
              "duration": 188277,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 283501125,
              "status": "passed"
            },
            "line": 13,
            "name": "create a new post payload and send a post request to \"/posts\" endpoint",
            "match": {
              "arguments": [
                {
                  "val": "\"/posts\"",
                  "offset": 53
                }
              ],
              "location": "PostStepDef.create_a_new_post_payload_and_send_a_post_request_to_endpoint(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18977031,
              "status": "passed"
            },
            "line": 14,
            "name": "verify created new post response with status code 201 and body",
            "match": {
              "arguments": [
                {
                  "val": "201",
                  "offset": 50
                }
              ],
              "location": "PostStepDef.verify_created_new_post_response_with_status_code_and_body(Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@posts"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:26.520Z",
        "before": [
          {
            "result": {
              "duration": 83123,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 16,
        "name": "Schema validation for first post",
        "description": "",
        "id": "post-api-service-tests;schema-validation-for-first-post",
        "after": [
          {
            "result": {
              "duration": 151537,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 104602327,
              "status": "passed"
            },
            "line": 17,
            "name": "send a get request to \"/posts/1\" endpoint to get posts",
            "match": {
              "arguments": [
                {
                  "val": "\"/posts/1\"",
                  "offset": 22
                }
              ],
              "location": "PostStepDef.send_a_get_request_to_endpoint_to_get_posts(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5479235,
              "status": "passed"
            },
            "line": 18,
            "name": "validate the post body with schema validation",
            "match": {
              "location": "PostStepDef.validate_the_post_body_with_schema_validation()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@posts"
          }
        ]
      }
    ],
    "name": "Post API Service Tests",
    "description": "",
    "id": "post-api-service-tests",
    "keyword": "Feature",
    "uri": "file:src/test/resources/features/post.feature",
    "tags": [
      {
        "name": "@posts",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "start_timestamp": "2021-05-06T00:28:26.632Z",
        "before": [
          {
            "result": {
              "duration": 488707,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 6,
        "name": "I should be able to receive all user list from users endpoint",
        "description": "",
        "id": "user-api-service-tests;i-should-be-able-to-receive-all-user-list-from-users-endpoint",
        "after": [
          {
            "result": {
              "duration": 178618,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 91223819,
              "status": "passed"
            },
            "line": 7,
            "name": "send a get request to \"/users\" endpoint",
            "match": {
              "arguments": [
                {
                  "val": "\"/users\"",
                  "offset": 22
                }
              ],
              "location": "UserStepDef.send_a_get_request_to_endpoint(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31375470,
              "status": "passed"
            },
            "line": 8,
            "name": "verify user list with response headers and status code 200 and size 10",
            "match": {
              "arguments": [
                {
                  "val": "200",
                  "offset": 55
                },
                {
                  "val": "10",
                  "offset": 68
                }
              ],
              "location": "UserStepDef.verify_user_list_with_response_headers_and_status_code_and_size(Integer,Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@users"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:26.762Z",
        "before": [
          {
            "result": {
              "duration": 84510,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 10,
        "name": "I shouldn\u0027t be able to receive user list from invalid users endpoint",
        "description": "",
        "id": "user-api-service-tests;i-shouldn-t-be-able-to-receive-user-list-from-invalid-users-endpoint",
        "after": [
          {
            "result": {
              "duration": 141666,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 96447032,
              "status": "passed"
            },
            "line": 11,
            "name": "send a get request to \"/use\" endpoint",
            "match": {
              "arguments": [
                {
                  "val": "\"/use\"",
                  "offset": 22
                }
              ],
              "location": "UserStepDef.send_a_get_request_to_endpoint(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 332775,
              "status": "passed"
            },
            "line": 12,
            "name": "verify response with status code 404",
            "match": {
              "arguments": [
                {
                  "val": "404",
                  "offset": 33
                }
              ],
              "location": "UserStepDef.verify_response_with_status_code(Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@users"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:26.861Z",
        "before": [
          {
            "result": {
              "duration": 94434,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 14,
        "name": "I should be able to create a new user",
        "description": "",
        "id": "user-api-service-tests;i-should-be-able-to-create-a-new-user",
        "after": [
          {
            "result": {
              "duration": 349591,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 284614970,
              "status": "passed"
            },
            "line": 15,
            "name": "create a new user payload and send a post request to \"/users\" endpoint",
            "match": {
              "arguments": [
                {
                  "val": "\"/users\"",
                  "offset": 53
                }
              ],
              "location": "UserStepDef.create_a_new_user_payload_and_send_a_post_request_to_endpoint(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 31107434,
              "status": "passed"
            },
            "line": 16,
            "name": "verify response with status code 201 and body",
            "match": {
              "arguments": [
                {
                  "val": "201",
                  "offset": 33
                }
              ],
              "location": "UserStepDef.verify_response_with_status_code_and_body(Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@users"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:27.180Z",
        "before": [
          {
            "result": {
              "duration": 216308,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 18,
        "name": "I should see the created user within the user list",
        "description": "",
        "id": "user-api-service-tests;i-should-see-the-created-user-within-the-user-list",
        "after": [
          {
            "result": {
              "duration": 170152,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 101261995,
              "status": "passed"
            },
            "line": 19,
            "name": "send a get request to \"/users/11\" endpoint",
            "match": {
              "arguments": [
                {
                  "val": "\"/users/11\"",
                  "offset": 22
                }
              ],
              "location": "UserStepDef.send_a_get_request_to_endpoint(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c200\u003e but was \u003c404\u003e.\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat jdk.internal.reflect.GeneratedMethodAccessor52.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1262)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat api_services.Users.verifyCreatedUserwith_Id_And_StatusCode(Users.java:100)\n\tat step_def.UserStepDef.verify_user_with_id_and_status_code(UserStepDef.java:51)\n\tat ✽.verify user with id 11 and status code 200(file:src/test/resources/features/user.feature:20)\n",
              "duration": 12980770,
              "status": "failed"
            },
            "line": 20,
            "name": "verify user with id 11 and status code 200",
            "match": {
              "arguments": [
                {
                  "val": "11",
                  "offset": 20
                },
                {
                  "val": "200",
                  "offset": 39
                }
              ],
              "location": "UserStepDef.verify_user_with_id_and_status_code(Integer,Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@users"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:27.304Z",
        "before": [
          {
            "result": {
              "duration": 249181,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 22,
        "name": "Schema validation for first user",
        "description": "",
        "id": "user-api-service-tests;schema-validation-for-first-user",
        "after": [
          {
            "result": {
              "duration": 211583,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 97506283,
              "status": "passed"
            },
            "line": 23,
            "name": "send a get request to \"/users/1\" endpoint",
            "match": {
              "arguments": [
                {
                  "val": "\"/users/1\"",
                  "offset": 22
                }
              ],
              "location": "UserStepDef.send_a_get_request_to_endpoint(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5886042,
              "status": "passed"
            },
            "line": 24,
            "name": "validate the user body with schema validation",
            "match": {
              "location": "UserStepDef.validate_the_user_body_with_schema_validation()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@users"
          }
        ]
      },
      {
        "start_timestamp": "2021-05-06T00:28:27.410Z",
        "before": [
          {
            "result": {
              "duration": 389761,
              "status": "passed"
            },
            "match": {
              "location": "Hook.setup(Scenario)"
            }
          }
        ],
        "line": 26,
        "name": "I shouldn\u0027t be sent invalid data set which is not json format",
        "description": "",
        "id": "user-api-service-tests;i-shouldn-t-be-sent-invalid-data-set-which-is-not-json-format",
        "after": [
          {
            "result": {
              "duration": 231400,
              "status": "passed"
            },
            "match": {
              "location": "Hook.teardown(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 462993035,
              "status": "passed"
            },
            "line": 27,
            "name": "send a post request with a body which is not json format to \"/users\" endpoint",
            "match": {
              "arguments": [
                {
                  "val": "\"/users\"",
                  "offset": 60
                }
              ],
              "location": "UserStepDef.send_a_post_request_with_a_body_which_is_not_json_format_to_endpoint(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: expected:\u003c400\u003e but was:\u003c500\u003e\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat api_services.Users.verifyErrorWithStatusCode(Users.java:123)\n\tat step_def.UserStepDef.verify_error_code_with_status_code(UserStepDef.java:70)\n\tat ✽.verify error code with status code 400(file:src/test/resources/features/user.feature:28)\n",
              "duration": 555415,
              "status": "failed"
            },
            "line": 28,
            "name": "verify error code with status code 400",
            "match": {
              "arguments": [
                {
                  "val": "400",
                  "offset": 35
                }
              ],
              "location": "UserStepDef.verify_error_code_with_status_code(Integer)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@users"
          }
        ]
      }
    ],
    "name": "User API Service Tests",
    "description": "",
    "id": "user-api-service-tests",
    "keyword": "Feature",
    "uri": "file:src/test/resources/features/user.feature",
    "tags": [
      {
        "name": "@users",
        "type": "Tag",
        "location": {
          "line": 1,
          "column": 1
        }
      }
    ]
  }
]